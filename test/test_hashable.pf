@test
subroutine test_hashable_int_key_and_val_equal_input()
  use funit
  use hist_hashable, only: hist_hashable_int_t
  use hist_hashable, only: new_hashable_int

  type(hist_hashable_int_t), pointer :: p=>NULL()

  call new_hashable_int(1, p)

  @assertEqual(1, p%val())   ! Assert value is the same it was created with
  @assertEqual("1", p%key()) ! Assert key is string version of val

end subroutine test_hashable_int_key_and_val_equal_input

@test
subroutine test_hashable_char_key_equal_input()
  use funit
  use hist_hashable, only: hist_hashable_char_t
  use hist_hashable, only: new_hashable_char

  type(hist_hashable_char_t), pointer :: p=>NULL()

  call new_hashable_char("a", p)

  @assertEqual("a", p%key()) ! Assert key is same as input into object

end subroutine test_hashable_char_key_equal_input

